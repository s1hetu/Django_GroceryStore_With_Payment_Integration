"""
Django settings for GroceryStore project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import psycopg2
# import django_on_heroku
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store',
    'product',
    'crispy_forms',
    'phonenumber_field',
    # 'django_celery_results',
    # 'django_celery_beat'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GroceryStore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GroceryStore.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST_NAME'),
        'PORT': os.environ.get('DB_PORT_NO'),
        'NAME': os.environ.get('DB_NAME'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'USER': os.environ.get('DB_USER_NAME'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # add custom validators for password
    {
        'NAME': 'store.validators.SpecialCharacterValidator'
    },
    {
        'NAME': 'store.validators.LowerCaseValidator'
    },
    {
        'NAME': 'store.validators.UpperCaseValidator'
    },
    {
        'NAME': 'store.validators.NumericValidator'
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL = 'grocery_store_home'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')

LOGIN_URL = 'login'
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django_on_heroku.settings(locals())

STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET')

CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_RESULT_BACKEND = "redis://localhost:6379"
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# disable default django logging by
# ----
# LOGGING_CONFIG = None
# - simply disable auto logging, this(logging) by default points to logging.config.dictConfig
# import logging.config
# logging.config.dictConfig( # pass the below LOGGING dict here as {})
# ----

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # name of formatter
        'msg_formatter': {
            # format : log level name,time, module, log message that generate the log message. (use style as well with this)
            # 'format': '{levelname} {asctime} {module} {message}',
            # 'style': '{',
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
            # format : time, name of logger, level, message (s = spaces)
        }
    },
    'filters': {
        'filter_debug_level': {
            '()': 'product.logging.FilterLevels',
            'filter_levels': ["DEBUG"],
        },
        'filter_info_level': {
            '()': 'product.logging.FilterLevels',
            'filter_levels': ["INFO"],
        },
        'filter_warn_level': {
            '()': 'product.logging.FilterLevels',
            'filter_levels': ["WARNING"],
        },
        'filter_error_level': {
            '()': 'product.logging.FilterLevels',
            'filter_levels': ["ERROR"],
        },
        'filter_critical_level': {
            '()': 'product.logging.FilterLevels',
            'filter_levels': ["CRITICAL"],
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'msg_formatter',
        },
        'warn_and_above': {
            'formatter': 'msg_formatter',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR/'logs'/'warn_and_above.log',
            'level': 'WARNING'
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'info.log',
            'formatter': 'msg_formatter',
            'filters': ['filter_info_level']
        },
        'warn': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'warn.log',
            'formatter': 'msg_formatter',
            'filters': ['filter_warn_level']
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'error.log',
            'formatter': 'msg_formatter',
            'filters': ['filter_error_level']
        },
        'critical': {
            'level': 'CRITICAL',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'critical.log',
            'formatter': 'msg_formatter',
            'filters': ['filter_critical_level']
        }
    },
    'loggers': {
        'django': {
            'handlers': ['info', 'console'],
            'level': 'INFO'
        },
        'custom_logger': {
            'handlers': ['info', 'warn', 'error', 'critical'],
            'level': 'INFO',
        },
        'warn_and_above_logger': {
            'handlers': ['warn_and_above'],
            'level': "WARNING",

        }

    },
}
# })
